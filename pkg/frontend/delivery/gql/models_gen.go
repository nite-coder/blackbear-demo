// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gql

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Event struct {
	ID              int64           `json:"id"`
	Title           string          `json:"title"`
	Description     string          `json:"description"`
	PublishedStatus PublishedStatus `json:"publishedStatus"`
	CreatedAt       time.Time       `json:"createdAt"`
	UpdatedAt       time.Time       `json:"updatedAt"`
}

type GetEventOptionsInput struct {
	ID    int64  `json:"id"`
	Title string `json:"title"`
}

type PublishEventInput struct {
	EventID int64 `json:"eventID"`
}

type Wallet struct {
	ID        int64     `json:"id"`
	Amount    int64     `json:"amount"`
	UpdatedAt time.Time `json:"updatedAt"`
}

type PublishedStatus string

const (
	PublishedStatusDraft     PublishedStatus = "DRAFT"
	PublishedStatusPublished PublishedStatus = "PUBLISHED"
)

var AllPublishedStatus = []PublishedStatus{
	PublishedStatusDraft,
	PublishedStatusPublished,
}

func (e PublishedStatus) IsValid() bool {
	switch e {
	case PublishedStatusDraft, PublishedStatusPublished:
		return true
	}
	return false
}

func (e PublishedStatus) String() string {
	return string(e)
}

func (e *PublishedStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PublishedStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PublishedStatus", str)
	}
	return nil
}

func (e PublishedStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
